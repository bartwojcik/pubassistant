# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-09-10 16:03
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('main_assistant', '0002_keyword_occurrence_count'),
    ]

    operations = [
        migrations.RunSQL(
            sql='\n            CREATE EXTENSION plpython3u;\n        ',
            reverse_sql='\n            DROP EXTENSION plpython3u;\n        ',
        ),
        migrations.RunSQL(
            sql='\n            CREATE VIEW scored_article AS\n            SELECT *, null::integer AS value\n            FROM main_assistant_article\n            WHERE false;\n        ',
            reverse_sql='\n            DROP VIEW IF EXISTS scored_article;\n        ',
        ),
        migrations.RunSQL(
            sql='\n            CREATE VIEW scored_publication AS\n            SELECT *, null::integer AS value\n            FROM main_assistant_publication\n            WHERE false;\n        ',
            reverse_sql='\n            DROP VIEW IF EXISTS scored_publication;\n        ',
        ),
        migrations.RunSQL(
            sql='\n            CREATE FUNCTION boolean_article_search(keywords_dict text)\n                RETURNS SETOF scored_article\n            AS $$\n                import json\n                keywords = json.loads(keywords_dict)\n                r = plpy.execute("""\n                    CREATE TEMPORARY TABLE keywords_input_temp (\n                    keyword varchar(255) not null,\n                    weight integer not null\n                    ) ON COMMIT DROP;\n                """)\n                insert_plan = plpy.prepare("""\n                    INSERT INTO keywords_input_temp VALUES ($1, $2)\n                """, [\'text\', \'int\'])\n                for keyword, value in keywords.items():\n                    plpy.execute(insert_plan, [keyword, value])\n                r = plpy.execute("""\n                    SELECT main_assistant_article.*, SUM(keywords_input_temp.weight) as value\n                    FROM main_assistant_article\n                    JOIN main_assistant_article_keywords\n                    ON main_assistant_article.id = main_assistant_article_keywords.article_id\n                    JOIN main_assistant_keyword\n                    ON main_assistant_article_keywords.keyword_id = main_assistant_keyword.id\n                    JOIN keywords_input_temp\n                    ON main_assistant_keyword.keyword = keywords_input_temp.keyword\n                    GROUP BY main_assistant_article.id\n                    ORDER BY value DESC;\n                """)\n                return r\n            $$ LANGUAGE plpython3u;\n        ',
            reverse_sql='\n            DROP FUNCTION IF EXISTS boolean_article_search(text);\n        ',
        ),
        migrations.RunSQL(
            sql='\n            CREATE FUNCTION boolean_publication_search(keywords_dict text)\n                RETURNS SETOF scored_publication\n            AS $$\n                import json\n                keywords = json.loads(keywords_dict)\n                r = plpy.execute("""\n                    CREATE TEMPORARY TABLE keywords_input_temp (\n                    keyword varchar(255) not null,\n                    weight integer not null\n                    ) ON COMMIT DROP;\n                """)\n                insert_plan = plpy.prepare("""\n                    INSERT INTO keywords_input_temp VALUES ($1, $2)\n                """, [\'text\', \'int\'])\n                for keyword, value in keywords.items():\n                    plpy.execute(insert_plan, [keyword, value])\n                r = plpy.execute("""\n                    SELECT main_assistant_publication.*, SUM(keywords_input_temp.weight) as value\n                    FROM main_assistant_publication\n                    JOIN main_assistant_article\n                    ON main_assistant_article.publication_id = main_assistant_publication.id\n                    JOIN main_assistant_article_keywords\n                    ON main_assistant_article.id = main_assistant_article_keywords.article_id\n                    JOIN main_assistant_keyword\n                    ON main_assistant_article_keywords.keyword_id = main_assistant_keyword.id\n                    JOIN keywords_input_temp\n                    ON main_assistant_keyword.keyword = keywords_input_temp.keyword\n                    GROUP BY main_assistant_publication.id\n                    ORDER BY value DESC;\n                """)\n                return r\n            $$ LANGUAGE plpython3u;\n        ',
            reverse_sql='\n            DROP FUNCTION IF EXISTS boolean_publication_search(text);\n        ',
        ),
        migrations.RunSQL(
            sql='\n            CREATE FUNCTION boolean_article_search_naive(keywords_dict text)\n                RETURNS SETOF scored_article\n            AS $$\n                import json\n                from collections import OrderedDict\n                keywords = json.loads(keywords_dict)\n                results = OrderedDict()\n\n                def add_article(article, weight):\n                    if article[\'identifier\'] in results:\n                        results[article[\'identifier\']][\'value\'] += weight\n                    else:\n                        results[article[\'identifier\']] = article\n                        article[\'value\'] = weight\n\n                # prepare plan\n                plan = plpy.prepare("""SELECT main_assistant_article.*\n                                       FROM main_assistant_article\n                                       JOIN main_assistant_article_keywords\n                                       ON main_assistant_article_keywords.article_id = main_assistant_article.id\n                                       JOIN main_assistant_keyword\n                                       ON main_assistant_article_keywords.keyword_id = main_assistant_keyword.id\n                                       WHERE main_assistant_keyword.keyword = $1""",\n                                    [\'text\'])\n                # for every keyword add articles that have the keyword to dict\n                for keyword_name, occurence_count in keywords.items():\n                    for article_row in plpy.cursor(plan, [keyword_name]):\n                        add_article(article_row, occurence_count)\n                # sort by keyword count occurring in the article\n                results = sorted(results.values(), key=lambda x: x[\'value\'], reverse=True)\n                return results\n            $$ LANGUAGE plpython3u;\n        ',
            reverse_sql='\n            DROP FUNCTION IF EXISTS boolean_article_search_naive(text);\n        ',
        ),
        migrations.RunSQL(
            sql='\n            CREATE FUNCTION boolean_publication_search_naive(keywords_dict text)\n                RETURNS SETOF scored_publication\n            AS $$\n                import json\n                from collections import OrderedDict\n                keywords = json.loads(keywords_dict)\n                results = OrderedDict()\n\n                def add_publication(publication, weight):\n                    if publication[\'identifier\'] in results:\n                        results[publication[\'identifier\']][\'value\'] += weight\n                    else:\n                        results[publication[\'identifier\']] = publication\n                        publication[\'value\'] = weight\n\n                # prepare plan\n                plan = plpy.prepare("""SELECT main_assistant_publication.*\n                                       FROM main_assistant_publication\n                                       JOIN main_assistant_article\n                                       ON main_assistant_publication.id = main_assistant_article.publication_id\n                                       JOIN main_assistant_article_keywords\n                                       ON main_assistant_article_keywords.article_id = main_assistant_article.id\n                                       JOIN main_assistant_keyword\n                                       ON main_assistant_article_keywords.keyword_id = main_assistant_keyword.id\n                                       WHERE main_assistant_keyword.keyword = $1""",\n                                    [\'text\'])\n                # for every keyword add publications that have the keyword to dict\n                for keyword_name, occurence_count in keywords.items():\n                    for publication_row in plpy.cursor(plan, [keyword_name]):\n                        add_publication(publication_row, occurence_count)\n                # sort by keyword count occurring in the publication\n                results = sorted(results.values(), key=lambda x: x[\'value\'], reverse=True)\n                return results\n            $$ LANGUAGE plpython3u;\n        ',
            reverse_sql='\n            DROP FUNCTION IF EXISTS boolean_publication_search_naive(text);\n        ',
        ),
    ]
